脚本第一行：#！
长字符串使用三个引号  单双引号均可
原始字符串：r 转义反斜杠。用前缀r表示 注意：原始字符串不能以单个反斜杠结尾。  

第一章：基础知识
	1.实现整除的操作符——双斜线，就算是浮点数，双斜线也会执行整除。
	2.十六进制和八进制
		十六进制：0xAF		八进制:010
	3.获取用户输入
		a=input("input a str")
	4.幂运算符 2**3 函数:pow(2,3)  2的3次幂
	5.注意  小数点后的位数会因使用的Python版本的不同而有所区别。
	6.函数 abs(-1)=1取绝对值。 round(1.0/2.0)=1 四舍五入  舍尾：floor(1.9)=1  收尾：ceil(1.4)=2
	7.模块 使用import导入模块，然后按照“模块.函数”的格式使用这个模块的函数，把浮点数转换为整数。int()(其余的类似。)
		在确定自己不会导入多个同名函数的情况下，可以使用import命令的另外一种形式：
			import math
			from math import sqrt(from模块import函数)(cmath标准的数学概念)
	8.让脚本想普通程序一样运行
		UNIX实现方法：在脚本首航前面加上#!/usr/bin/env/ python 
		windows 最后一行加raw_input("press <Enter>")
	9.注释 使用#即可 
	10.字符串  单引号字符串和转义引号
	11.拼接字符串
	12.字符串表示 str()将值转换为合理形式的字符串。
				  repr()创建一个字符串
	13.input和raw_input的比较
		input会假设用户输入的是合法的python表达式，而raw_input会把所有的输入当做原始数据。
	15.长字符串、原始字符串和Unicode
		长字符串：使用三个引号即可：  """helo                 jsldjf """   
		原始字符串：r"D:\123\123"	  "D:\\123\\123"    	 最后一位不能使用\
第二章  列表和元组
	列表和元组的主要区别在于：列表可以修改，元组不能。	
	序列操作：索引、分片、加、乘、成员资格、序列长度、最大元素、最小元素、迭代。
	索引：从0开始递增（从左边开始计数）。  从右边开始，最后一个元素的位置编号是-1.
	分片：与使用索引来访问单个元素类似，可以使用分片操作来访问一定范围内的元素。分片通过冒号相隔的两个索引来实现。
		分片：含左不含右。即顾头不顾尾。
		eg: numbers=[1,2,3,4,5,6,7,8,9,10]
			numbers[3:6]=[4,5,6]
			头到中间：numbers[:5]
			头到尾  ：numbers[:]
			尾到头  ：numbers[-1:]
	步长：步长不可为0，可以是负数，即从右到左提取元素。
		numbers[1:9:2]=[2,4,6,8]   从2个位置（索引1）开始到第10个位置（索引9）每隔两个取一个数。
		当使用一个负数作为步长时，必须让开始点大于结束点。
	序列相加：[1,2,3]+[4,5,6]=[1,2,3,4,5,6]
	乘法：    [2]*5=[2, 2, 2, 2, 2]		  
	None、空列表和初始化
		空列表：用[]表示即可。None与Java的null类似。
	成员资格：in
		x in "xy"  True
	长度、最小值和最大值
		len()/min()/max()
	Python的苦力
		list函数。list("hello")=['h','e','l','l','o']
		将一个由字符组成的列表转换为字符串：''.join(somelist)
		改变列表的方法：元素赋值、元素删除、分片赋值以及列表方法。
		x[1]=1  不能为一个位置不存在元素进行赋值。
		删除 del numbers[2]
		分片赋值：
			name=list('Perl')
			name[2:]=list('ar')
			插入新元素：
			numbers=[1,5]
			numbers[1:1]=[2,3,4]
		列表方法：
			append()、count()、extend()(延升同l1+l2),index()从列表中找出某个值第一个匹配项的索引位置。
			insert([index],"hello")  pop()移除最后一个元素，并且返回该元素的值。
			remove()   reverse()反向存放。
			sort()排序  高级排序：x.sort(key=len)  关键字参数
			
	元组：不可变序列 （tuple）
		}
	
	
第三章 字符串
	1、字符串格式化。
		1.1 %s 称为转换说明符，他们标记了需要插入转换值的未知。S表示值会被格式化为字符串——如果不是字符串，则会将str转换为字符串。
		1.2 模板字符串
			from string import Template 
			s = Templeate('$x,glorious $x!')
			s = s.substitute(x="slurm")
			注意:1.当需要使用$符号时，输入两个即可。$$
				 2.如果替换字段是单词的一部分，那么参数名就必须用括号括起来。
					 s = Template("It's ${x}tastic!")
					 s = substitute(x='slurm')
				 3.除了关键字参数之外，还可以使用字典变量提供值/名称对
					 s = Template('A $thing must never $action.')
					 d = {}
					 d['thing'] = 'gentleman'
					 d['action'] = 'show this socks'
					 s.substitute(d)
				 4.safe_substitute不会因缺少值或者不真确使用$字符而出错。	 	 
		1.3 字符串格式化 完整版
					 A.%字符：标记转换说明符的开始
					 B.转换标志（可选）：-表示左对齐；+表示在转换值之前要加上正负号；“”（空白字符）表示正数之前保留空格；0表示转换值若位数不够则用0填充。
					 C.最小字段宽度（可选）：如果转换的是实数，精度值就表示出现在小数点后的位数。如果转换的是字符串，那么该数字就表示最大字段宽度。如果是*，那么精度将会从元组中读出。
					 D.装换类型
					 转换类型                                 含义
					 d,i                                   带符号的十进制整数
					 o                                     不带符号的八进制
					 u                                     不带符号的十进制
					 x/X                                   不带符号的十六进制（大写/小写）
					 e/E                                   科学计数法表示的浮点数（大写/小写）
					 f/F                                   十进制浮点数
					 g/G                                   如果指数大于-4或者小于精度值则和e/E相同，
					 									   其他情况与f/F相同
					 C                                     单字符（接受整数或者单字符字符串）
					 r                                     字符串（使用repr转换任意Python对象）
					 s                                     字符串（使用str转换任意Python对象） 
		字段宽度和精度  %10.2f  #字段宽10，精度2 浮点数
						两个参数都是整数，首先是字段宽度，然后是字段精度，通过.分割。虽然两个都是可选的参数，但如果只给出精度，就必须包含点号。

					可以使用*作为字段宽度或者精度（或者两者都是用*），此时数值会从元组参数中读出：
					'%*.*s' % (10,2,'Jleeci')
		符号、对其和0填充
			在字段宽度和精度之前还可以防止一个“标表”，该标表可以是零、加号、减号或空格。
			零表示数字将会用0进行填充。
			减号表示左对齐；
			空格表示在正数钱加上空格(在对齐正负数时很有用)。
			加号表示不管是正数还是负数都标示除符号。（同样在对齐时很有用）
		字符串方法
		find()可以在一个较长的字符串中查找子字符串。返回子串所在位置的最左端索引。未找到则返回-1.
		find(str,[startIndex,endIndex])顾头不顾尾。即[s,end)
		join 是split方法的逆方法，用来在队列中添加元素。
		lower()返回小写字符
		title()单词首字母大写
		replace()/translate()
		split()
		strip()去除首尾的空格 lstrip(),rstrip()
	第四章 字典
		dict函数
			items=[("name","Jleeci"),("age",42)]
			dict(items)
			d=dict(name="Jleeci",age=42)
			可以用dict函数，通过其他映射（比如其他字典）或者（键，值）这样的序列对建立字典。
			也可以通过关键字参数来创建字典。
		基本字典操作
			len(d) 返回d中项（键-值对）的数量
			d[k]返回关联到键k上的值。
			d[k]=v将值v关联到键k上
			del d[k]删除键为k的项
			k in d 检查d中是否含有键为k的项。
			成员资格：表达式k in d查找的是键，而不是值。
					  表达式v in l则用来查找值，而不是索引。
		字符串格式化
		str="""<html>
			<head><title>%(title)s</title></head>
			<body>
			<h1>%(title)s</h1>
			<p>%(text)s</p>
			</body></html>"""
		data={"title":"My Home Page","text":"Welcome to my home page!"}
		print template % data
		字典方法
			clear()清楚字典中所有的项
			copy()浅复制，其副本中替换值得时候，原始字典不受影响，但是如果修改了某个值，原始的字典也会改变。
			deepcopy()深复制，不会有上述影响。
			fromkeys() 使用给定的键建立新的字典，每个键默认对应的值为None  同样也可以设定一个默认值fromkeys(['name','age'],'unknown')
			get()等同于d[x]但是后者如果在字典中不存在，那么就会抛出一个异常。而前者则不会如果没有就返回None，同样也可以设定一个默认值。get('x','N/A')
			items和iteritems
			items方法将所有的字典项以列表方式返回，这些列表项中的每一项都来自于（键，值）。但是项在返回时并没有特殊的顺序。
			keys和iterkeys
			popitem() 弹出随机的项，因为字典并没有“最后的元素”或者其他有关序列的概念。
			setdefault()   当键不存在的时候，setdefault返回默认值并且相应的更新字典。如果键存在，那么就返回与其对应的值，但不改变字典。
			update() 可以利用一个字典项更新另外一个字典。相当于把字典2追加到字典1。如果有相同的键则进行覆盖。
			values()和itervalues()

	第五章 条件循环和其他语句
		下面的值在作为布尔表达式的时候，会被解释器看作假（false）:
		False None 0 "" () [] {}
		条件执行：
			if Ture:

			elif Ture:

			else Ture:
		比较运算符：
			x is y   x和y是同一个对象   相当于java中的equals
			x is not y x和y是不同的对象
			x in y   x not in y 成员资格  （其余同其他语言一致，）
			x <> y 表示x!=y	(建议不要使用)		
		布尔运算符：
			and  or  not
		a if c else b
		如果c为真返回a,否则返回b
		注意在python文件中首行或者第二行应该是如下代码
		或者符合规则（^[ \t\v]*#.*?coding[:=][ \t]*([-_.a-zA-Z0-9]+)）：
		#!/usr/bin/python
		# -*- coding: <encoding name> -*-

		断言 assert   猜测其后为真，否则直接抛出异常。
		并行迭代：
		zip函数
		zip(names,age)可以将两个列表压缩成一个元组的列表。可以压缩任意多的序列，而且zip可以应付不等长的序列：当短的序列“用完”的时候就会停止。
		枚举：enumerate()
		终止循环：
			break  结束本层循环。
			continue 跳出本次循环继续执行下次循环。
		列表推导式：
			[x*x for x in range(10) if x%3==0]
		pass 占位符（因为在Python中空代码块是非法的。）
		del
		exec 动态的创造Python代码，然后将其作为语句执行或作为表达式计算。 
		eval 用于求值，其会计算Python表达式，并且返回结果值。




		callable()可以用来判断函数是否可调用  3.0不在有此方法。
											  3.0的用法 hasattr(func,__call__)
		文档字符串  在函数的开头写下字符串，就会作为函数的一部分进行存储。

		收集参数  *param 默认将非位置参数
		关键字参数 **param  {1=1,2=2,3=3}

		全局变量的调用 globals()
		函数内修改全局变量需要首先告知其是一个全局变量 因此使用global x

		嵌套函数
			外层函数返回内层函数
		函数到处放
			map()/filter()/reduce()/
			apply()调用函数  apply(func,args)
	更加抽象
		多态：意味着可以对不同类的对象使用同样的操作。
		封装：对外部世界隐藏对象的工作细节。
		继承：以普通的类为基础建立专门的类对象。
		函数的封装，其在声明的时候参数首位都必须传递self参数
		而在函数的调用时候都不用传递首位（self）参数
		为了让方法或者特性变为私有（从外部无法访问），只要在它的名字前面加上双下划线即可。
		在类的内部定义中，所有以双下划线开始的名字都被“翻译”成前面加上单下划线和类名的形式。eg:ex._Example.__private()

		在类的定义去并不只限于使用def语句。可以使用诸如print之类的。

		
